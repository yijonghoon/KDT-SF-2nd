// 20230401_생성자,소멸자.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>



//클래스는 필드, 메소드, 생성자, 소멸자로 구성됨.
//생성자 : 객체가 생성될 때 자동으로 실행되는 메소드
//소멸자 : 객체가 소멸될 때 자동으로 실행되는 메소드

class Person {
public:
    Person() {
        std::cout << "Person 생성자 입니다." << std::endl;
    }

    ~Person() {
        std::cout << "Person 소멸자 입니다." << std::endl;
    }
};

class Student : public Person {
public:
    Student() : Person() {
        std::cout << "Student 생성자 입니다." << std::endl;
    }
    ~Student() {
        std::cout << "Student 소멸자 입니다." << std::endl;
    }
};

int main()
{
    Student s = Student(); // 부모클래스 먼저 생성 자식클래스 나중에 생성 -> 자식클래스 먼저 소멸 부모클래스 나중에 소멸

    Student* s2 = new Student();
    delete s2;

    Person p; 
    // 정적 메모리 -> 스택영역에 저장됨. 해제를 명시적으로 할 필요 없음 ( 자동으로 언젠가 해제 됨)
    // main함수가 닫힐 때 자동으로 해제됨
    Person* p2 = new Person();
    // 동적 메모리
    // heap 영역에 저장됨. 해제를 명시적으로 할 필요 있음
    // 필요없을때 delete 해줘야함
    std::cout << "안녕하세요" << std::endl;
    delete p2; //소멸자입니다.
    std::cout << "안녕하세요" << std::endl;


    return 0;  
} // 중괄호가 끝나면 함수가 소멸한다

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
