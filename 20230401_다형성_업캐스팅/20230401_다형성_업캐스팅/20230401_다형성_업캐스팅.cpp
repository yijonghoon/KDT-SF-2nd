// 20230401_다형성_업캐스팅.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
class Person {
public:
	void test() {
		std::cout << "test" << std::endl;
	}
};
class Student : public Person {
public:
	void test_stu() {
		std::cout << "student test" << std::endl;
	}
};
int main()
{
	// Person p = Student(); 이건 그냥 다형성을 보여주는 코드, 잘 쓰이지는 않음
	Student s;
	Person* p = new Student();
	
	Person* p2 = &s; // 업캐스팅, 여기서 p2는 동적메모리가 아니다. 주소를 담고 있는것
	p2->test(); //업캐스팅 된 경우 화살표로....
	// delete p2; // 동적 메모리를 해제하는 구문 delete를 썼을때 실행을 시키면 오류가 뜸 -> 동적 메모리가 아니다, heap 영역에 있지 않다
	// 동적 메모리를 선언할때 new를 쓰고 해제할때 delete를 한다

	Person* p3 = new Student();
	p3->test();

	//업캐스팅 : 부모 클래스의 포인터로 자식 클래스의 인스턴스를 가리키는 것
	//다운캐스팅 : 원상태로 돌려 놓는 것
	Student* stu = (Student*)p3; // 다운캐스팅. (Student*) 형변환을 통해 다운캐스팅 해 준다.
	// p3 = (Student*)p3; //이건 기껏 다운캐스팅 한 p3를 다시 업캐스팅하는 의미 없는 코드!
	stu->test_stu();
	delete p3;
	return 0;
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
